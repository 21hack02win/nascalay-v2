// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/proto/v2/game.proto

package protov2connect

import (
	context "context"
	errors "errors"
	v2 "github.com/21hack02win/nascalay-v2/pkg/bufgen/api/proto/v2"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GameServiceName is the fully-qualified name of the GameService service.
	GameServiceName = "api.proto.v2.GameService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameServiceReadyToStartProcedure is the fully-qualified name of the GameService's ReadyToStart
	// RPC.
	GameServiceReadyToStartProcedure = "/api.proto.v2.GameService/ReadyToStart"
	// GameServiceSubmitThemeProcedure is the fully-qualified name of the GameService's SubmitTheme RPC.
	GameServiceSubmitThemeProcedure = "/api.proto.v2.GameService/SubmitTheme"
	// GameServiceLockDrawingProcedure is the fully-qualified name of the GameService's LockDrawing RPC.
	GameServiceLockDrawingProcedure = "/api.proto.v2.GameService/LockDrawing"
	// GameServiceSubmitAnswerProcedure is the fully-qualified name of the GameService's SubmitAnswer
	// RPC.
	GameServiceSubmitAnswerProcedure = "/api.proto.v2.GameService/SubmitAnswer"
	// GameServiceShowNextAnswerProcedure is the fully-qualified name of the GameService's
	// ShowNextAnswer RPC.
	GameServiceShowNextAnswerProcedure = "/api.proto.v2.GameService/ShowNextAnswer"
	// GameServiceReturnRoomProcedure is the fully-qualified name of the GameService's ReturnRoom RPC.
	GameServiceReturnRoomProcedure = "/api.proto.v2.GameService/ReturnRoom"
	// GameServiceExitRoomProcedure is the fully-qualified name of the GameService's ExitRoom RPC.
	GameServiceExitRoomProcedure = "/api.proto.v2.GameService/ExitRoom"
)

// GameServiceClient is a client for the api.proto.v2.GameService service.
type GameServiceClient interface {
	ReadyToStart(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	SubmitTheme(context.Context, *connect_go.Request[v2.SubmitThemeRequest]) (*connect_go.Response[emptypb.Empty], error)
	LockDrawing(context.Context, *connect_go.Request[v2.LockDrawingRequest]) (*connect_go.Response[emptypb.Empty], error)
	SubmitAnswer(context.Context, *connect_go.Request[v2.SubmitAnswerRequest]) (*connect_go.Response[emptypb.Empty], error)
	ShowNextAnswer(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	ReturnRoom(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	ExitRoom(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
}

// NewGameServiceClient constructs a client for the api.proto.v2.GameService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gameServiceClient{
		readyToStart: connect_go.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+GameServiceReadyToStartProcedure,
			opts...,
		),
		submitTheme: connect_go.NewClient[v2.SubmitThemeRequest, emptypb.Empty](
			httpClient,
			baseURL+GameServiceSubmitThemeProcedure,
			opts...,
		),
		lockDrawing: connect_go.NewClient[v2.LockDrawingRequest, emptypb.Empty](
			httpClient,
			baseURL+GameServiceLockDrawingProcedure,
			opts...,
		),
		submitAnswer: connect_go.NewClient[v2.SubmitAnswerRequest, emptypb.Empty](
			httpClient,
			baseURL+GameServiceSubmitAnswerProcedure,
			opts...,
		),
		showNextAnswer: connect_go.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+GameServiceShowNextAnswerProcedure,
			opts...,
		),
		returnRoom: connect_go.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+GameServiceReturnRoomProcedure,
			opts...,
		),
		exitRoom: connect_go.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+GameServiceExitRoomProcedure,
			opts...,
		),
	}
}

// gameServiceClient implements GameServiceClient.
type gameServiceClient struct {
	readyToStart   *connect_go.Client[emptypb.Empty, emptypb.Empty]
	submitTheme    *connect_go.Client[v2.SubmitThemeRequest, emptypb.Empty]
	lockDrawing    *connect_go.Client[v2.LockDrawingRequest, emptypb.Empty]
	submitAnswer   *connect_go.Client[v2.SubmitAnswerRequest, emptypb.Empty]
	showNextAnswer *connect_go.Client[emptypb.Empty, emptypb.Empty]
	returnRoom     *connect_go.Client[emptypb.Empty, emptypb.Empty]
	exitRoom       *connect_go.Client[emptypb.Empty, emptypb.Empty]
}

// ReadyToStart calls api.proto.v2.GameService.ReadyToStart.
func (c *gameServiceClient) ReadyToStart(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return c.readyToStart.CallUnary(ctx, req)
}

// SubmitTheme calls api.proto.v2.GameService.SubmitTheme.
func (c *gameServiceClient) SubmitTheme(ctx context.Context, req *connect_go.Request[v2.SubmitThemeRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.submitTheme.CallUnary(ctx, req)
}

// LockDrawing calls api.proto.v2.GameService.LockDrawing.
func (c *gameServiceClient) LockDrawing(ctx context.Context, req *connect_go.Request[v2.LockDrawingRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.lockDrawing.CallUnary(ctx, req)
}

// SubmitAnswer calls api.proto.v2.GameService.SubmitAnswer.
func (c *gameServiceClient) SubmitAnswer(ctx context.Context, req *connect_go.Request[v2.SubmitAnswerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.submitAnswer.CallUnary(ctx, req)
}

// ShowNextAnswer calls api.proto.v2.GameService.ShowNextAnswer.
func (c *gameServiceClient) ShowNextAnswer(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return c.showNextAnswer.CallUnary(ctx, req)
}

// ReturnRoom calls api.proto.v2.GameService.ReturnRoom.
func (c *gameServiceClient) ReturnRoom(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return c.returnRoom.CallUnary(ctx, req)
}

// ExitRoom calls api.proto.v2.GameService.ExitRoom.
func (c *gameServiceClient) ExitRoom(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return c.exitRoom.CallUnary(ctx, req)
}

// GameServiceHandler is an implementation of the api.proto.v2.GameService service.
type GameServiceHandler interface {
	ReadyToStart(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	SubmitTheme(context.Context, *connect_go.Request[v2.SubmitThemeRequest]) (*connect_go.Response[emptypb.Empty], error)
	LockDrawing(context.Context, *connect_go.Request[v2.LockDrawingRequest]) (*connect_go.Response[emptypb.Empty], error)
	SubmitAnswer(context.Context, *connect_go.Request[v2.SubmitAnswerRequest]) (*connect_go.Response[emptypb.Empty], error)
	ShowNextAnswer(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	ReturnRoom(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	ExitRoom(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
}

// NewGameServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameServiceHandler(svc GameServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	gameServiceReadyToStartHandler := connect_go.NewUnaryHandler(
		GameServiceReadyToStartProcedure,
		svc.ReadyToStart,
		opts...,
	)
	gameServiceSubmitThemeHandler := connect_go.NewUnaryHandler(
		GameServiceSubmitThemeProcedure,
		svc.SubmitTheme,
		opts...,
	)
	gameServiceLockDrawingHandler := connect_go.NewUnaryHandler(
		GameServiceLockDrawingProcedure,
		svc.LockDrawing,
		opts...,
	)
	gameServiceSubmitAnswerHandler := connect_go.NewUnaryHandler(
		GameServiceSubmitAnswerProcedure,
		svc.SubmitAnswer,
		opts...,
	)
	gameServiceShowNextAnswerHandler := connect_go.NewUnaryHandler(
		GameServiceShowNextAnswerProcedure,
		svc.ShowNextAnswer,
		opts...,
	)
	gameServiceReturnRoomHandler := connect_go.NewUnaryHandler(
		GameServiceReturnRoomProcedure,
		svc.ReturnRoom,
		opts...,
	)
	gameServiceExitRoomHandler := connect_go.NewUnaryHandler(
		GameServiceExitRoomProcedure,
		svc.ExitRoom,
		opts...,
	)
	return "/api.proto.v2.GameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameServiceReadyToStartProcedure:
			gameServiceReadyToStartHandler.ServeHTTP(w, r)
		case GameServiceSubmitThemeProcedure:
			gameServiceSubmitThemeHandler.ServeHTTP(w, r)
		case GameServiceLockDrawingProcedure:
			gameServiceLockDrawingHandler.ServeHTTP(w, r)
		case GameServiceSubmitAnswerProcedure:
			gameServiceSubmitAnswerHandler.ServeHTTP(w, r)
		case GameServiceShowNextAnswerProcedure:
			gameServiceShowNextAnswerHandler.ServeHTTP(w, r)
		case GameServiceReturnRoomProcedure:
			gameServiceReturnRoomHandler.ServeHTTP(w, r)
		case GameServiceExitRoomProcedure:
			gameServiceExitRoomHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameServiceHandler struct{}

func (UnimplementedGameServiceHandler) ReadyToStart(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.proto.v2.GameService.ReadyToStart is not implemented"))
}

func (UnimplementedGameServiceHandler) SubmitTheme(context.Context, *connect_go.Request[v2.SubmitThemeRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.proto.v2.GameService.SubmitTheme is not implemented"))
}

func (UnimplementedGameServiceHandler) LockDrawing(context.Context, *connect_go.Request[v2.LockDrawingRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.proto.v2.GameService.LockDrawing is not implemented"))
}

func (UnimplementedGameServiceHandler) SubmitAnswer(context.Context, *connect_go.Request[v2.SubmitAnswerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.proto.v2.GameService.SubmitAnswer is not implemented"))
}

func (UnimplementedGameServiceHandler) ShowNextAnswer(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.proto.v2.GameService.ShowNextAnswer is not implemented"))
}

func (UnimplementedGameServiceHandler) ReturnRoom(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.proto.v2.GameService.ReturnRoom is not implemented"))
}

func (UnimplementedGameServiceHandler) ExitRoom(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.proto.v2.GameService.ExitRoom is not implemented"))
}
