// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file api/proto/v2/game.proto (package api.proto.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.proto.v2.SubmitThemeRequest
 */
export class SubmitThemeRequest extends Message<SubmitThemeRequest> {
  /**
   * @generated from field: string theme = 1;
   */
  theme = "";

  constructor(data?: PartialMessage<SubmitThemeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.SubmitThemeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "theme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitThemeRequest {
    return new SubmitThemeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitThemeRequest {
    return new SubmitThemeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitThemeRequest {
    return new SubmitThemeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitThemeRequest | PlainMessage<SubmitThemeRequest> | undefined, b: SubmitThemeRequest | PlainMessage<SubmitThemeRequest> | undefined): boolean {
    return proto3.util.equals(SubmitThemeRequest, a, b);
  }
}

/**
 * @generated from message api.proto.v2.LockDrawingRequest
 */
export class LockDrawingRequest extends Message<LockDrawingRequest> {
  /**
   * @generated from field: string drawing = 1;
   */
  drawing = "";

  constructor(data?: PartialMessage<LockDrawingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.LockDrawingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drawing", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockDrawingRequest {
    return new LockDrawingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockDrawingRequest {
    return new LockDrawingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockDrawingRequest {
    return new LockDrawingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LockDrawingRequest | PlainMessage<LockDrawingRequest> | undefined, b: LockDrawingRequest | PlainMessage<LockDrawingRequest> | undefined): boolean {
    return proto3.util.equals(LockDrawingRequest, a, b);
  }
}

/**
 * @generated from message api.proto.v2.SubmitAnswerRequest
 */
export class SubmitAnswerRequest extends Message<SubmitAnswerRequest> {
  /**
   * @generated from field: string answer = 1;
   */
  answer = "";

  constructor(data?: PartialMessage<SubmitAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.SubmitAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitAnswerRequest {
    return new SubmitAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitAnswerRequest {
    return new SubmitAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitAnswerRequest {
    return new SubmitAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitAnswerRequest | PlainMessage<SubmitAnswerRequest> | undefined, b: SubmitAnswerRequest | PlainMessage<SubmitAnswerRequest> | undefined): boolean {
    return proto3.util.equals(SubmitAnswerRequest, a, b);
  }
}

