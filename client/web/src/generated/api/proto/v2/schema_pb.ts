// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file api/proto/v2/schema.proto (package api.proto.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.proto.v2.Player
 */
export class Player extends Message<Player> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: api.proto.v2.Player.Avatar avatar = 3;
   */
  avatar?: Player_Avatar;

  constructor(data?: PartialMessage<Player>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.Player";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avatar", kind: "message", T: Player_Avatar },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player {
    return new Player().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJsonString(jsonString, options);
  }

  static equals(a: Player | PlainMessage<Player> | undefined, b: Player | PlainMessage<Player> | undefined): boolean {
    return proto3.util.equals(Player, a, b);
  }
}

/**
 * @generated from message api.proto.v2.Player.Avatar
 */
export class Player_Avatar extends Message<Player_Avatar> {
  /**
   * @generated from field: api.proto.v2.Player.Avatar.AvatarType type = 1;
   */
  type = Player_Avatar_AvatarType.UNSPECIFIED;

  /**
   * @generated from field: string color = 2;
   */
  color = "";

  constructor(data?: PartialMessage<Player_Avatar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.Player.Avatar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Player_Avatar_AvatarType) },
    { no: 2, name: "color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player_Avatar {
    return new Player_Avatar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player_Avatar {
    return new Player_Avatar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player_Avatar {
    return new Player_Avatar().fromJsonString(jsonString, options);
  }

  static equals(a: Player_Avatar | PlainMessage<Player_Avatar> | undefined, b: Player_Avatar | PlainMessage<Player_Avatar> | undefined): boolean {
    return proto3.util.equals(Player_Avatar, a, b);
  }
}

/**
 * @generated from enum api.proto.v2.Player.Avatar.AvatarType
 */
export enum Player_Avatar_AvatarType {
  /**
   * @generated from enum value: AVATAR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AVATAR_TYPE_DOG = 1;
   */
  DOG = 1,

  /**
   * @generated from enum value: AVATAR_TYPE_CAT = 2;
   */
  CAT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Player_Avatar_AvatarType)
proto3.util.setEnumType(Player_Avatar_AvatarType, "api.proto.v2.Player.Avatar.AvatarType", [
  { no: 0, name: "AVATAR_TYPE_UNSPECIFIED" },
  { no: 1, name: "AVATAR_TYPE_DOG" },
  { no: 2, name: "AVATAR_TYPE_CAT" },
]);

/**
 * @generated from message api.proto.v2.Reaction
 */
export class Reaction extends Message<Reaction> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<Reaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.Reaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reaction {
    return new Reaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reaction {
    return new Reaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reaction {
    return new Reaction().fromJsonString(jsonString, options);
  }

  static equals(a: Reaction | PlainMessage<Reaction> | undefined, b: Reaction | PlainMessage<Reaction> | undefined): boolean {
    return proto3.util.equals(Reaction, a, b);
  }
}

/**
 * @generated from message api.proto.v2.Room
 */
export class Room extends Message<Room> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 capacity = 3;
   */
  capacity = 0;

  /**
   * @generated from field: api.proto.v2.Room.RoomShape shape = 4;
   */
  shape = Room_RoomShape.ROOM_SHAPE_UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Duration duration = 5;
   */
  duration?: Duration;

  /**
   * @generated from field: repeated api.proto.v2.Player players = 6;
   */
  players: Player[] = [];

  /**
   * @generated from field: api.proto.v2.Game game = 8;
   */
  game?: Game;

  constructor(data?: PartialMessage<Room>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.Room";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "capacity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "shape", kind: "enum", T: proto3.getEnumType(Room_RoomShape) },
    { no: 5, name: "duration", kind: "message", T: Duration },
    { no: 6, name: "players", kind: "message", T: Player, repeated: true },
    { no: 8, name: "game", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Room {
    return new Room().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJsonString(jsonString, options);
  }

  static equals(a: Room | PlainMessage<Room> | undefined, b: Room | PlainMessage<Room> | undefined): boolean {
    return proto3.util.equals(Room, a, b);
  }
}

/**
 * @generated from enum api.proto.v2.Room.RoomShape
 */
export enum Room_RoomShape {
  /**
   * @generated from enum value: ROOM_SHAPE_UNSPECIFIED = 0;
   */
  ROOM_SHAPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROOM_SHAPE_5X5 = 1;
   */
  ROOM_SHAPE_5X5 = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Room_RoomShape)
proto3.util.setEnumType(Room_RoomShape, "api.proto.v2.Room.RoomShape", [
  { no: 0, name: "ROOM_SHAPE_UNSPECIFIED" },
  { no: 1, name: "ROOM_SHAPE_5X5" },
]);

/**
 * @generated from message api.proto.v2.Game
 */
export class Game extends Message<Game> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: api.proto.v2.Game.GamePhase phase = 2;
   */
  phase = Game_GamePhase.UNSPECIFIED;

  /**
   * @generated from field: repeated api.proto.v2.Theme themes = 3;
   */
  themes: Theme[] = [];

  constructor(data?: PartialMessage<Game>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.Game";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phase", kind: "enum", T: proto3.getEnumType(Game_GamePhase) },
    { no: 3, name: "themes", kind: "message", T: Theme, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Game {
    return new Game().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Game {
    return new Game().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Game {
    return new Game().fromJsonString(jsonString, options);
  }

  static equals(a: Game | PlainMessage<Game> | undefined, b: Game | PlainMessage<Game> | undefined): boolean {
    return proto3.util.equals(Game, a, b);
  }
}

/**
 * @generated from enum api.proto.v2.Game.GamePhase
 */
export enum Game_GamePhase {
  /**
   * @generated from enum value: GAME_PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: GAME_PHASE_THEME = 1;
   */
  THEME = 1,

  /**
   * @generated from enum value: GAME_PHASE_DRAW = 2;
   */
  DRAW = 2,

  /**
   * @generated from enum value: GAME_PHASE_ANSWER = 3;
   */
  ANSWER = 3,

  /**
   * @generated from enum value: GAME_PHASE_RESULT = 4;
   */
  RESULT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Game_GamePhase)
proto3.util.setEnumType(Game_GamePhase, "api.proto.v2.Game.GamePhase", [
  { no: 0, name: "GAME_PHASE_UNSPECIFIED" },
  { no: 1, name: "GAME_PHASE_THEME" },
  { no: 2, name: "GAME_PHASE_DRAW" },
  { no: 3, name: "GAME_PHASE_ANSWER" },
  { no: 4, name: "GAME_PHASE_RESULT" },
]);

/**
 * @generated from message api.proto.v2.Theme
 */
export class Theme extends Message<Theme> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string answer = 2;
   */
  answer = "";

  constructor(data?: PartialMessage<Theme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.proto.v2.Theme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Theme {
    return new Theme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Theme {
    return new Theme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Theme {
    return new Theme().fromJsonString(jsonString, options);
  }

  static equals(a: Theme | PlainMessage<Theme> | undefined, b: Theme | PlainMessage<Theme> | undefined): boolean {
    return proto3.util.equals(Theme, a, b);
  }
}

